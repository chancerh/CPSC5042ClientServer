@startuml
class Calculator {

        + calculateExpression(string inExpr): string
        + convertor(const string &choice, string inValue): string
        + summary(const string &inValue): string
        - expTokenize(string &inExpression): vector<string>
        - convertToRPN(vector<string> &expTokens): vector<string>
        - calculateRPN(vector<string> &rpnStack): double
        - validateInputString(const string &inExpression, set<char> validChars): bool
        - binToHex(string &input): string
        - hexToBin(string &input): string
        - decToBin(string &input): string
        - binToDec(string &input): string
        - hexToDec(string &input): string
        - decToHex(string &input): string
        - mean(const vector<float> &vec): float
        - var(const vector<float> &vec): float
        - sd(const vector<float> &vec): float
        - quantiles(vector<float> vec, float quantCuts): vector<float>
        - percentile(vector<float> vec, float nth): float

        - precedenceMap: unordered_map<string, int>
        - INVALID_EXPRESSION = "Invalid expression entered.": const string
        - INVALID_OPERATOR = "Invalid operator entered.": const string
        - INVALID_ARG = "Invalid argument entered.": const string
        - BIN_CHAR = {'0', '1'}: const set<char>
        - DEC_CHAR: const set<char>
        - FLOAT_CHAR: const set<char>
        - HEX_CHAR: const set<char>
        - EXP_CHAR: const set<char>
}

class ClientHandler {
        + ClientHandler(int socket, const string &fileName)
        + ~ClientHandler()
        + ProcessRPC(pthread_mutex_t *g_contextLock, pthread_mutex_t *g_screenLock, GlobalContext *g_globalContext): bool

        - ProcessConnectRPC(vector<std::string>& arrayTokens, pthread_mutex_t *g_screenLock): bool
        - ProcessCal(vector<std::string> &arrayTokens, pthread_mutex_t *g_screenLock): bool
        - ProcessDisconnectRPC(pthread_mutex_t *g_screenLock): bool
        - ParseTokens(char* buffer, std::vector<std::string>& a): void
        - sendBuffer(char *szBuffer, pthread_mutex_t *g_screenLock) const: void
        - printServerStats(const GlobalContext *g_globalContext, const string &phase) const: void

        - m_socket: int
        - m_authenticated: bool
        - m_authenticator: Authenticator
        - localContext: LocalContext*
        - m_users: unordered_map<string,string>
        - CONNECT = "connect": const string
        - DISCONNECT = "disconnect": const string
        - CALC_EXPR = "calculateExpression": const string
        - CALC_STAT = "calculateStats": const string
        - CALC_CONV = "conversion": const string
        - SUCCESS = "0;": const string
        - GENERAL_FAIL = "-1;": const string
        - INVALID_ARG = "Invalid argument entered.": const string

}

class LocalContext {
        + getRpcCount(): int
        + incrementRpcCount(): void
        - m_RpcCount = 0: int
}

class RPCServer {
        + RPCServer(const char *serverIP, int port)
        + ~RPCServer()
        + StartServer(): bool
        + ListenForClient(): bool

        - m_server_fd: int
        - m_socket: int
        - *m_serverIP: char
        - m_port: int
        - sockaddr_in m_address: struct
        - MUTEX_INIT_FAIL: const string  = "Failed to initialize mutex."
}

Class Authenticator {
    - m_users: unordered_map<string, string>
    - readFile(const string &filename, char delim = ','): void
    + authenticate(const string &username, const string &password): bool
    + Authenticator(const string &filename)
    + ~Authenticator()

}

RPCServer *-- ClientHandler
ClientHandler *-- Calculator
ClientHandler *-- Authenticator
ClientHandler *-- LocalContext

@enduml
